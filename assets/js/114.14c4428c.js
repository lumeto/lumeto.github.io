(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{562:function(t,e,a){"use strict";a.r(e);var r=a(44),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vue中computed的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中computed的特点"}},[t._v("#")]),t._v(" Vue中Computed的特点")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ol",[a("li",[t._v("computed定义的数据不可以被修改，除非你主动设定set")]),t._v(" "),a("li",[t._v("computed中的计算结果是被缓存的，计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的")])]),t._v(" "),a("h3",{attrs:{id:"computed的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed的原理"}},[t._v("#")]),t._v(" computed的原理")]),t._v(" "),a("p",[a("strong",[t._v("何时做的依赖收集？")])]),t._v(" "),a("p",[t._v("Vue中的所有依赖收集都是在data的 getter中做的。所以在computed初始化也就是第一次执行回调函数时，")]),t._v(" "),a("p",[a("strong",[t._v("包含computed数据时的页面的渲染过程是什么？")])]),t._v(" "),a("p",[t._v("比如，在页面A中依赖了计算属性B，B又依赖了data C。 那么当data C发生变化时，")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通知 computed B watcher 更新，其实只会重置 脏数据标志位 dirty =true，不会计算值")])]),t._v(" "),a("li",[a("p",[t._v("通知 页面 A watcher 进行更新渲染，进而重新读取 computed B ，然后 computed B 开始重新计算")])])]),t._v(" "),a("p",[t._v("computed B成为页面A和data C的桥梁，")])])}),[],!1,null,null,null);e.default=o.exports}}]);