(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{503:function(t,v,_){"use strict";_.r(v);var e=_(44),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"js-web-api-ajax"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-web-api-ajax"}},[t._v("#")]),t._v(" JS-Web-API-Ajax")]),t._v(" "),_("h3",{attrs:{id:"xmlhttprequest"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest"}},[t._v("#")]),t._v(" XMLHttpRequest")]),t._v(" "),_("p",[_("code",[t._v("XMLHttpRequest（XHR）")]),t._v("对象用于与服务器交互，我们通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL获取数据，并且虽然名字叫"),_("code",[t._v("XMLHttpRequest")]),t._v("，但实际上可以用于获取任何类型的数据。")]),t._v(" "),_("p",[_("strong",[t._v("XMLHttpRequest的使用主要可以分为如下几步：")])]),t._v(" "),_("ul",[_("li",[t._v("创建XMLHttpRequest对象")]),t._v(" "),_("li",[t._v("建立http连接")]),t._v(" "),_("li",[t._v("发送请求")]),t._v(" "),_("li",[t._v("获取返回数据")])]),t._v(" "),_("h3",{attrs:{id:"跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),_("h3",{attrs:{id:"jsonp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),_("h3",{attrs:{id:"cors-服务端设置返回时的http-header"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cors-服务端设置返回时的http-header"}},[t._v("#")]),t._v(" CORS：服务端设置返回时的http header")]),t._v(" "),_("h3",{attrs:{id:"相关面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关面试题"}},[t._v("#")]),t._v(" 相关面试题")]),t._v(" "),_("p",[_("strong",[t._v("1. 什么是浏览器的同源策略")])]),t._v(" "),_("p",[_("code",[t._v("同源策略")]),t._v("（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。")]),t._v(" "),_("p",[t._v("它的核心就在于它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，而不是那些来自其它站点可能怀有恶意的资源。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("所谓同源是指：域名、协议、端口相同")])]),t._v(" "),_("p",[t._v("下表是相对于 http://www.test.com/home/index.html 的同源检测结果：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("URL")]),t._v(" "),_("th",[t._v("结果")]),t._v(" "),_("th",[t._v("原因")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("http://www.test.com/other/index.html")]),t._v(" "),_("td",[t._v("成功")]),t._v(" "),_("td",[t._v("域名、协议、端口 都相同")])]),t._v(" "),_("tr",[_("td",[t._v("https://www.test.com/other/index.html")]),t._v(" "),_("td",[t._v("失败")]),t._v(" "),_("td",[t._v("协议不同")])]),t._v(" "),_("tr",[_("td",[t._v("http://www.test.com:8080/home/index.html")]),t._v(" "),_("td",[t._v("失败")]),t._v(" "),_("td",[t._v("端口不同")])]),t._v(" "),_("tr",[_("td",[t._v("http://www.test.cn/home/index.html")]),t._v(" "),_("td",[t._v("失败")]),t._v(" "),_("td",[t._v("域名不同")])])])]),t._v(" "),_("p",[_("strong",[t._v("2. 什么是跨域")])]),t._v(" "),_("p",[t._v("所谓跨域就是根据业务需求需要跨过浏览器的同源限制，因为同源策略，非同源之间，不能进行交互。那么跨域就是解决非同源之间发起请求、请求数据、发送数据、通信等交互问题解决方法的统称。")]),t._v(" "),_("p",[_("strong",[t._v("3. 实现跨域的常见方式 - jsonp 和 CORS")])]),t._v(" "),_("p",[_("strong",[t._v("4. 手写 Ajax")])]),t._v(" "),_("p",[t._v("GoTo："),_("a",{attrs:{href:"/days/notes/program/2"}},[t._v("手写Ajax")])])])}),[],!1,null,null,null);v.default=s.exports}}]);